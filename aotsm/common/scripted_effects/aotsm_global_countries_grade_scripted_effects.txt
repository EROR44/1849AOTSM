create_PRESTIGE_sorted_array = {
	if = {
		limit = {
			check_variable = { last_sort_var = sort_var }
		}
		set_variable = { middle = global.country_grade_list_array^num }
		set_temp_variable = { len = global.country_grade_list_array^num }
		subtract_from_temp_variable = { len = 1 }
		divide_variable = { middle = 2 }
		round_variable = middle
		for_loop_effect = {
            start = 0
            end = middle

			set_temp_variable = { reverse = len }
			subtract_from_temp_variable = { reverse = v }
			set_temp_variable = { swap = global.country_grade_list_array^v }
			set_variable = { global.country_grade_list_array^v = global.country_grade_list_array^reverse }
			set_variable = { global.country_grade_list_array^reverse = swap }
		}
		clear_variable = middle
		set_variable = { last_sort_var = 0 }
	}

	else = {
		set_temp_variable = { temp_array_sort = 4 }
		set_temp_variable = { temp_value_sort = 2 }
		scoped_quicksort = yes
		set_variable = { last_sort_var = sort_var }
	}
}

# Randomized Iterative Quicksort by Yard1
# Feel free to use in your mods, but give credits to Yard1 (both in code, with comments; and on your download page)
# I added a meta effect & scripted loc to take in array arguments - reimu
scoped_quicksort = {
	meta_effect = {
		text = {
			set_variable = { high = [SORTARRAY]^num }
			subtract_from_variable = { high = 1 }
			set_variable = { low = 0 }

			set_temp_variable = { stack_size = high }
			subtract_from_temp_variable = { stack_size = low }
			add_to_temp_variable = { stack_size = 1 }

			resize_temp_array = {
				array = stack
				value = 0
				size = stack_size
			}

			set_temp_variable = { top = 0 }
			set_temp_variable = { stack^top = low }
			add_to_temp_variable = { top = 1 }
			set_temp_variable = { stack^top = high }

			while_loop_effect = {
				limit = { 
					check_variable = {
						var = top
						value = 0
						compare = greater_than_or_equals
					}
				}
				set_variable = { high = stack^top }
				subtract_from_temp_variable = { top = 1 }
				set_variable = { low = stack^top }
				subtract_from_temp_variable = { top = 1 }

				set_variable = { random_pivot = random }
				multiply_variable = { random_pivot = high }
				round_variable = random_pivot
				add_to_variable = { random_pivot = low }
				clamp_variable = {
					var = random_pivot
					min = low
					max = high
				}
				set_temp_variable = { swap = [SORTARRAY]^high }
				set_variable = { [SORTARRAY]^high = [SORTARRAY]^random_pivot }
				set_variable = { [SORTARRAY]^random_pivot = swap }

				set_temp_variable = { idx = low }
				subtract_from_temp_variable = { idx = 1 }

				var:[SORTARRAY]^high = {
					set_variable = { PREV.minimum = [SORTVALUE] }
				}

				for_loop_effect = {
					start = low
					end = high
					var:[SORTARRAY]^v = {
						set_variable = { PREV.tmp = [SORTVALUE] }
					}
					if = {
						limit = {
							check_variable = {
								var = tmp
								value = minimum
								compare = greater_than_or_equals
							}
						}
						add_to_temp_variable = { idx = 1 }
						set_temp_variable = { swap = [SORTARRAY]^idx }
						set_variable = { [SORTARRAY]^idx = [SORTARRAY]^v }
						set_variable = { [SORTARRAY]^v = swap }
					}
				}

				add_to_temp_variable = { idx = 1 }
				set_temp_variable = { swap = [SORTARRAY]^idx }
				set_variable = { [SORTARRAY]^idx = [SORTARRAY]^high }
				set_variable = { [SORTARRAY]^high = swap }

				set_temp_variable = { qs_partition_return = idx }

				set_temp_variable = { qs_partition_return_plus_1 = qs_partition_return }
				set_temp_variable = { qs_partition_return_minus_1 = qs_partition_return }
				add_to_temp_variable = { qs_partition_return_plus_1 = 1 } 
				subtract_from_temp_variable = { qs_partition_return_minus_1 = 1 } 

				if = {
					limit = { check_variable = { qs_partition_return_minus_1 > low } }
					add_to_temp_variable = { top = 1 }
					set_temp_variable = { stack^top = low }
					add_to_temp_variable = { top = 1 }
					set_temp_variable = { stack^top = qs_partition_return_minus_1 }
				}
				if = {
					limit = { check_variable = { qs_partition_return_plus_1 < high } }
					add_to_temp_variable = { top = 1 }
					set_temp_variable = { stack^top = qs_partition_return_plus_1 }
					add_to_temp_variable = { top = 1 }
					set_temp_variable = { stack^top = high }
				}
			}
			clear_variable = minimum
			clear_variable = tmp
			clear_variable = random_pivot
		}
		SORTARRAY = "[ROOT.GetSortArray]"
		SORTVALUE = "[ROOT.GetSortValue]"
	}
}

math_square_root = {
	set_temp_variable = { math_sqrt_output = 1 }

	for_loop_effect = {
		start = 0
		end = 10 # probably can converge way less before the end but keep at 10 just in case - maho

		set_temp_variable = { sqrt_temp = math_sqrt_number }
		divide_temp_variable = { sqrt_temp = math_sqrt_output }
		add_to_temp_variable = { math_sqrt_output = sqrt_temp }
		divide_temp_variable = { math_sqrt_output = 2 }
	}
}

sum_cap = {
	subtract_from_temp_variable = { temp_index = 1 }

	# check to see if result overflows
	set_temp_variable = { temp = temp_value_array^temp_index }
	add_to_temp_variable = { temp = temp_value }

	if = {
		limit = {
			check_variable = { temp > max }
		}
		subtract_from_temp_variable = { temp = max }
		subtract_from_temp_variable = { temp_value = temp }
	}
	else_if = {
		limit = {
			check_variable = { temp < 0 }
		}
		multiply_temp_variable = { temp = -1 }
		subtract_from_temp_variable = { temp_value = temp }
	}

	# adds all parties to temp_array
	for_loop_effect = {
		start = 0
		end = temp_value_array^num

		add_to_temp_array = { temp_array = v }
	}

	# remove from list of parties the party to be added/subtracted
	remove_from_temp_array = { array = temp_array value = temp_index }

	# give party new seat value
	add_to_variable = { temp_value_array^temp_index = temp_value }

	# if its add
	if = {
		limit = {
			check_variable = { temp_value > 0 }
		}
		# loop until seats to be added is 0
		while_loop_effect = {
			limit = {
				check_variable = { temp_value > 0 }
			}

			# loops through remaining parties, subtracting 1 seat each time
			for_loop_effect = {
				start = 0
				end = temp_array^num

				if = {
					limit = {
						check_variable = { temp_value_array^temp_array^v > 0 } # party must have more than 0 seats to be subtracted
						check_variable = { temp_value > 0 } # seats to be added is bigger than 0 currently
					}
					subtract_from_variable = { temp_value_array^temp_array^v = 1 } # subtract from party 1 seat
					subtract_from_temp_variable = { temp_value = 1 } # subtract from seats to be added
				}
			}
		}
	}
	# if its subtract
	else_if = {
		limit = {
			check_variable = { temp_value < 0 }
		}
		# loop until seats to be subtracted is 0
		while_loop_effect = {
			limit = {
				check_variable = { temp_value < 0 }
			}

			# loops through remaining parties, adding 1 seat each time
			for_loop_effect = {
				start = 0
				end = temp_array^num

				if = {
					limit = {
						check_variable = { temp_value_array^temp_array^v < max } # party must have less than max seats to be added
						check_variable = { temp_value < 0 } # seats to be subtracted is less than 0 currently
					}
					add_to_variable = { temp_value_array^temp_array^v = 1 } # add to party 1 seat
					add_to_temp_variable = { temp_value = 1 } # add to seats to be subtracted
				}
			}
		}
	}
}

example_sum_cap_usage = {
	set_temp_variable = { max = 100 } # maximum total of all variables
	set_temp_variable = { temp_value = 10 } # value to add
	set_temp_variable = { temp_index = 2 } # which variable to add it to (second variable in this case)

	add_to_array = { temp_value_array = variable_1 } # first variable added
	add_to_array = { temp_value_array = variable_2 } # second variable added
	add_to_array = { temp_value_array = variable_3 } # third variable added

	sum_cap = yes

	set_variable = { variable_1 = temp_value_array^0 } # new first variable
	set_variable = { variable_2 = temp_value_array^1 } # new second variable
	set_variable = { variable_3 = temp_value_array^2 } # new third variable

	clear_array = temp_value_array # not used anymore good practice to throw it away
}

update_position = {
	clear_array = global.top_seven_prestige_array
	
	set_temp_variable = { position = 0 }
	set_variable = { sort_var = 1 }
	set_variable = { last_sort_var = 0 }
	create_PRESTIGE_sorted_array = yes

	for_each_scope_loop = {
		array = global.country_grade_list_array

		add_to_temp_variable = { position = 1 }
		set_variable = { THIS.prestige_position = position }

		if = {
			limit = {
				check_variable = { THIS.prestige_position < 7 }
			}
			add_to_array = { global.top_seven_prestige_array = THIS }
			add_to_variable = { global.top_seven_total = country_prestige }
			set_variable = { global.last_prestige = country_prestige }
		}
	}
}

calculate_prestige = {
	every_country = {
		set_variable = { country_prestige = 0 }
		set_variable = { country_base_prestige = 150 } 
		set_variable = { country_industry_score = 0 }
		set_variable = { country_army_score = 0 }
		set_variable = { country_navy_score = 0 }
		set_variable = { country_size_score = 0 }
		set_variable = { country_science_score = 0 }
		set_variable = { country_own_size_score = 0 }
		set_variable = { country_subject_size_score = 0 }
	}

	every_country = {

		# Industry
		set_variable = { country_summ_factories = num_of_owned_factories }
		set_variable = { country_synthetic_refinery = total_constructed_synthetic_refinery }
		set_variable = { country_leypoldit_complex = total_constructed_leypoldit_complex }
		set_variable = { country_nuclear_reactors = total_constructed_nuclear_reactor }
		set_variable = { country_radar_stations_num = country_radar_stations }

		clamp_variable = {
			var = country_summ_factories
			min = 0
		}
		clamp_variable = {
			var = country_synthetic_refinery
			min = 0
		}
		clamp_variable = {
			var = country_leypoldit_complex
			min = 0
		}
		clamp_variable = {
			var = country_nuclear_reactors
			min = 0
		}
		clamp_variable = {
			var = country_radar_stations_num
			min = 0
		}

		add_to_variable = { country_industry_score = country_summ_factories }
		add_to_variable = { country_industry_score = country_synthetic_refinery }
		add_to_variable = { country_industry_score = country_leypoldit_complex }
		add_to_variable = { country_industry_score = country_nuclear_reactors }
		add_to_variable = { country_industry_score = country_radar_stations_num }
		
		if = { #градация по промышленному развитию
			limit = {
				has_idea = agrarian_country
			}
			multiply_variable = { country_industry_score = 0.2 }
		}
		else_if = {
			limit = {
				has_idea = manufactory_production
			}
			multiply_variable = { country_industry_score = 0.4 }
		}
		else_if = {
			limit = {
				has_idea = manufactory_production
			}
			multiply_variable = { country_industry_score = 0.5 }
		}
		else_if = {
			limit = {
				has_idea = backward_industry
			}
			multiply_variable = { country_industry_score = 0.6 }
		}
		else_if = {
			limit = {
				has_idea = medium_developed_industry
			}
			multiply_variable = { country_industry_score = 0.8 }
		}
		else_if = {
			limit = {
				has_idea = modern_industry
			}
			multiply_variable = { country_industry_score = 0.9 }
		}

		# Science
		set_variable = { country_tech_num = num_researched_technologies  } 
		set_variable = { country_research_slots_num = amount_research_slots  } 
		
		add_to_variable = { country_science_score = country_tech_num }
		multiply_variable = { country_science_score = 0.35 }
		add_to_variable = { country_science_score = amount_research_slots }
		
		
		# Army Land
		set_variable = { country_land_army = num_battalions  }
		multiply_variable = { country_land_army = 0.015 }
		add_to_variable = { country_army_score = country_land_army }

		# Army Air ##OFF - нет корректного параметра от которого можно считать
		#set_variable = { country_air_army = num_deployed_planes }
		#multiply_variable = { country_air_army = 0.1 }
		#add_to_variable = { country_army_score = country_air_army }

		# Army Navy
		set_variable = { country_navy_army = num_ships }
		multiply_variable = { country_navy_army = 0.03 }
		add_to_variable = { country_army_score = country_navy_army }
		
		# Size
		set_variable = { country_own_size_score = num_owned_controlled_states }
		multiply_variable = { country_own_size_score = 0.03 }
		add_to_variable = { country_size_score = country_own_size_score }

		# Size for Subjetcs
		for_each_scope_loop = {
			array = subjects
			if = {
				limit = {
					check_variable = { PREV.num_subjects > 0 }
				}
				set_temp_variable = { temp_subject_size_score = num_owned_controlled_states }
				multiply_temp_variable = { temp_subject_size_score = 0.025 }
				add_to_variable = { PREV.country_subject_size_score = temp_subject_size_score }
				add_to_variable = { PREV.country_size_score = temp_subject_size_score }
			}
		}
		
		# Espionage
		set_variable = { country_cryptology_defense_level = cryptology_defense_level }
		set_variable = { country_num_operative_slots = num_operative_slots }
		set_variable = { country_agency_upgrade_number = agency_upgrade_number }
		
		set_variable = { country_espionage_level = 0 }
		
		add_to_variable = { country_espionage_level = country_cryptology_defense_level }
		add_to_variable = { country_espionage_level = country_num_operative_slots }
		add_to_variable = { country_espionage_level = country_agency_upgrade_number }
		
		multiply_variable = { country_espionage_level = 0.5 }

		add_to_variable = { country_prestige = country_base_prestige }
		add_to_variable = { country_prestige = country_industry_score }
		add_to_variable = { country_prestige = country_science_score }
		add_to_variable = { country_prestige = country_army_score }	
		add_to_variable = { country_prestige = country_size_score }
		add_to_variable = { country_prestige = country_espionage_level }

		set_variable = { country_westernisation_bonus = 0 }
		set_variable = { country_country_status_bonus = 0 }
		set_variable = { country_total_prestige_bonus = 0 }
		set_variable = { country_hidden_prestige_bonus = 0 }
		
		if = { #градация престижа по этапу вестернизации
			limit = {
				check_variable = {
					ROOT.progress_of_westornisation_frame = 1
				}
			}
			subtract_from_variable = { country_westernisation_bonus = 5 }
			add_to_variable = { country_total_prestige_bonus = country_westernisation_bonus }
		}
		else_if = {
			limit = {
				check_variable = {
					ROOT.progress_of_westornisation_frame = 3
				}
			}
			add_to_variable = { country_westernisation_bonus = 1.25 }
			add_to_variable = { country_total_prestige_bonus = country_westernisation_bonus }
		}
		else_if = {
			limit = {
				check_variable = {
					ROOT.progress_of_westornisation_frame = 4
				}
			}
			add_to_variable = { country_westernisation_bonus = 2.5 }
			add_to_variable = { country_total_prestige_bonus = country_westernisation_bonus }
		}
		
		if = { #градация престижа для стран по статусу 
			limit = {
				OR = {
					is_puppet = yes
					is_subject = yes
					has_idea = colonial_autonomy
					has_idea = average_colony
					has_idea = small_colony
					has_idea = colonial_area
				}
			}
			multiply_variable = { country_prestige = 0.6 } #Мультипликацию не отразить конкретным параметром в скриптовой локе
		}
		else_if = {
			limit = {
				has_idea = medium_country
			}
			add_to_variable = { country_country_status_bonus = 2.5 }
			add_to_variable = { country_total_prestige_bonus = country_country_status_bonus }
		}
		else_if = {
			limit = {
				has_idea = large_country
			}
			add_to_variable = { country_country_status_bonus = 5 }
			add_to_variable = { country_total_prestige_bonus = country_country_status_bonus }
		}
		else_if = {
			limit = {
				has_idea = potential_world_power
			}
			add_to_variable = { country_country_status_bonus = 7.5 }
			add_to_variable = { country_total_prestige_bonus = country_country_status_bonus }
		}
		else_if = {
			limit = {
				has_idea = world_power
			}
			add_to_variable = { country_country_status_bonus = 10 }
			add_to_variable = { country_total_prestige_bonus = country_country_status_bonus }
		}
		
		multiply_variable = { country_total_prestige_bonus = 0.75 }
		add_to_variable = { country_prestige = country_total_prestige_bonus }
		
		if = { # скрытые бафы и дебафы для престижа
			limit = {
				tag = RUS
			}
			add_to_variable = { country_hidden_prestige_bonus = 15 }
			subtract_from_variable = { country_prestige = country_hidden_prestige_bonus }
		}
	}
}